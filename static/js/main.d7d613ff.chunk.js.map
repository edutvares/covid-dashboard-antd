{"version":3,"sources":["pages/Map/index.js","pages/Dashboard/index.js","App.js","reportWebVitals.js","index.js"],"names":["Map","Title","columns","title","dataIndex","key","render","TotalConfirmed","color","TotalRecovered","TotalDeaths","Dashboard","useState","dataSource","global","loading","data","setData","useEffect","a","fetch","method","redirect","then","response","json","Global","Countries","catch","error","console","log","dataFetch","gutter","size","span","value","valueStyle","style","marginTop","Header","Layout","Content","Footer","Sider","App","collapsed","setCollapsed","minHeight","collapsible","onCollapse","className","theme","defaultSelectedKeys","mode","Item","icon","PieChartOutlined","to","GlobalOutlined","padding","align","level","margin","path","textAlign","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","locale","ptBR","document","getElementById"],"mappings":"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","file":"static/js/main.d7d613ff.chunk.js","sourcesContent":["import { Typography } from \"antd\";\r\nimport \"./style.css\";\r\n\r\nexport default function Map() {\r\n  return <Typography.Title>Colocaremos um mapinha aqui :D</Typography.Title>;\r\n}\r\n","import { Card, Col, Row, Statistic, Table, Tag } from \"antd\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Country\",\r\n    dataIndex: \"Country\",\r\n    key: \"Country\",\r\n  },\r\n  {\r\n    title: \"TotalConfirmed\",\r\n    dataIndex: \"TotalConfirmed\",\r\n    key: \"TotalConfirmed\",\r\n    render: (TotalConfirmed) => (\r\n      <Tag color=\"gold\" key={TotalConfirmed}>\r\n        {TotalConfirmed}\r\n      </Tag>\r\n    ),\r\n  },\r\n  {\r\n    title: \"TotalRecovered\",\r\n    dataIndex: \"TotalRecovered\",\r\n    key: \"TotalRecovered\",\r\n    render: (TotalRecovered) => (\r\n      <Tag color=\"green\" key={TotalRecovered}>\r\n        {TotalRecovered}\r\n      </Tag>\r\n    ),\r\n  },\r\n  {\r\n    title: \"TotalDeaths\",\r\n    dataIndex: \"TotalDeaths\",\r\n    key: \"TotalDeaths\",\r\n    render: (TotalDeaths) => (\r\n      <Tag color=\"red\" key={TotalDeaths}>\r\n        {TotalDeaths}\r\n      </Tag>\r\n    ),\r\n  },\r\n];\r\n\r\nexport default function Dashboard() {\r\n  const [data, setData] = useState({\r\n    dataSource: {},\r\n    global: {},\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const dataFetch = async () => {\r\n      var requestOptions = {\r\n        method: \"GET\",\r\n        redirect: \"follow\",\r\n      };\r\n\r\n      fetch(\"https://api.covid19api.com/summary\", requestOptions)\r\n        .then((response) => response.json())\r\n        .then(({ Global, Countries }) => {\r\n          setData({ global: Global, dataSource: Countries, loading: false });\r\n        })\r\n        .catch((error) => console.log(\"error\", error));\r\n    };\r\n    dataFetch();\r\n    console.log(data.global);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Row gutter={16} size=\"16\">\r\n        <Col span={8}>\r\n          <Card>\r\n            <Statistic\r\n              title=\"Cases\"\r\n              value={!data.loading ? data.global.TotalConfirmed : \"--\"}\r\n              valueStyle={{ color: \"#3f8600\" }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col span={8}>\r\n          <Card>\r\n            <Statistic\r\n              title=\"Recovered\"\r\n              value={!data.loading ? data.global.TotalRecovered : \"--\"}\r\n              valueStyle={{ color: \"#3f8600\" }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col span={8}>\r\n          <Card>\r\n            <Statistic\r\n              title=\"Deaths\"\r\n              value={!data.loading ? data.global.TotalDeaths : \"--\"}\r\n              valueStyle={{ color: \"#cf1322\" }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Table\r\n        style={{ marginTop: \"16px\" }}\r\n        columns={columns}\r\n        dataSource={!data.loading && data.dataSource}\r\n        loading={data.loading}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import { useState } from \"react\";\n\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport { Layout, Menu, Space, Typography } from \"antd\";\nimport { PieChartOutlined, GlobalOutlined } from \"@ant-design/icons\";\n\nimport Map from \"./pages/Map\";\nimport Dashboard from \"./pages/Dashboard\";\n\nconst { Header, Content, Footer, Sider } = Layout;\n\nconst App = () => {\n  const [collapsed, setCollapsed] = useState(false);\n\n  return (\n    <Router>\n      <Layout style={{ minHeight: \"100vh\" }}>\n        <Sider collapsible collapsed={collapsed} onCollapse={setCollapsed}>\n          <div className=\"logo\" />\n          <Menu theme=\"dark\" defaultSelectedKeys={[\"1\"]} mode=\"inline\">\n            <Menu.Item key=\"1\" icon={<PieChartOutlined />}>\n              <Link to=\"/\">Dashboard</Link>\n            </Menu.Item>\n            <Menu.Item key=\"2\" icon={<GlobalOutlined />}>\n              <Link to=\"/map\">Map</Link>\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout className=\"site-layout\">\n          <Header\n            className=\"site-layout-background\"\n            style={{ padding: \"0 40px\" }}\n          >\n            <Space align=\"center\">\n              <Typography.Title level={4}>Covid-19 Dashboard</Typography.Title>\n            </Space>\n          </Header>\n          <Content style={{ margin: \"16px\" }}>\n            <div\n              className=\"site-layout-background\"\n              style={{ padding: 24, minHeight: 360 }}\n            >\n              <Switch>\n                <Route path=\"/map\">\n                  <Map />\n                </Route>\n                <Route path=\"/\">\n                  <Dashboard />\n                </Route>\n              </Switch>\n            </div>\n          </Content>\n          <Footer style={{ textAlign: \"center\" }}>\n            Ant Design Â©2018 Created by Ant UED\n          </Footer>\n        </Layout>\n      </Layout>\n    </Router>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"antd/dist/antd.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { ConfigProvider } from \"antd\";\nimport ptBR from \"antd/lib/locale/pt_BR\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ConfigProvider locale={ptBR}>\n      <App />\n    </ConfigProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}